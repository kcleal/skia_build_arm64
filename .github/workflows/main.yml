name: Build Skia

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

jobs:
  build:
    name: Build Skia
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        arch: [arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y ninja-build libharfbuzz-dev libwebp-dev clang python3 \
                libgles2-mesa-dev libegl1-mesa-dev mesa-common-dev libglfw3-dev
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install bazelisk ninja harfbuzz webp glfw
          fi

      - name: Set up environment variables
        run: |
          echo "SKIA_OUTPUT_PATH=$GITHUB_WORKSPACE/lib/skia" >> $GITHUB_ENV
          mkdir -p $GITHUB_WORKSPACE/lib/skia
          mkdir -p $GITHUB_WORKSPACE/build_skia && cd $GITHUB_WORKSPACE/build_skia

      - name: Detect architecture and OS
        id: detect_env
        run: |
          ARCH=$(uname -m)
          OS=$(uname -s)
          lscpu
          
          if [ "$ARCH" = "x86_64" ]; then
              echo "EXTRA_CFLAGS=[\"-mavx2\", \"-mfma\", \"-msse4.2\", \"-mpopcnt\", \"-mf16c\"]" >> $GITHUB_ENV  # , \"-frtti\"
              echo "EXTRA_LDFLAGS=[\"-mavx2\", \"-mfma\"]" >> $GITHUB_ENV
          elif [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
              echo "EXTRA_CFLAGS=[\"-march=armv8-a+crc+crypto\"]" >> $GITHUB_ENV  # , \"-frtti\"
              echo "EXTRA_LDFLAGS=[\"-march=armv8-a+crc+crypto\"]" >> $GITHUB_ENV
          else
              echo "Unsupported architecture: $ARCH"
              exit 1
          fi
          
          EXTRA_ARGS=""
          if [ "$OS" = "Darwin" ]; then
              SDK_PATH="/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"
              EXTRA_ARGS="skia_use_gl=true skia_use_metal=true"
          elif [ "$OS" = "Linux" ]; then
              EXTRA_ARGS="skia_use_egl=true skia_use_gl=true skia_use_x11=true"
          else
              echo "Unsupported OS: $OS"
              exit 1
          fi
          
          echo "ARCH=$ARCH"
          echo "OS=$OS"
          echo "EXTRA_ARGS=$EXTRA_ARGS"
          
          echo "ARCH=$ARCH" >> $GITHUB_ENV
          echo "OS=$OS" >> $GITHUB_ENV
          echo "EXTRA_ARGS=$EXTRA_ARGS" >> $GITHUB_ENV

      - name: Clone depot_tools and Skia
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export PATH="$GITHUB_WORKSPACE/depot_tools:$PATH"
          cd $GITHUB_WORKSPACE
          depot_tools/fetch skia

      - name: Build Skia
        run: |
          cd $GITHUB_WORKSPACE/skia
          git checkout origin/chrome/m133
          python3 tools/git-sync-deps
          REL=Release
          bin/gn gen out/${REL} --args="is_official_build=true \
              skia_use_system_icu=false \
              skia_use_system_zlib=false \
              skia_use_system_expat=false \
              skia_use_system_libjpeg_turbo=false \
              skia_use_system_libpng=false \
              skia_use_system_libwebp=false \
              skia_use_system_harfbuzz=false \
              skia_pdf_subset_harfbuzz=true \
              skia_enable_skottie=true \
              target_cpu=\"${ARCH}\" \
              extra_cflags=${EXTRA_CFLAGS} \
              extra_ldflags=${EXTRA_LDFLAGS} \
              cc=\"clang\" \
              cxx=\"clang++\" \
              ${EXTRA_ARGS}"
          ninja -C out/${REL}

      - name: Copy Build Artifacts
        run: |
          mkdir -p $GITHUB_WORKSPACE/lib/skia/out/Release
          cp -r out/Release/* $GITHUB_WORKSPACE/lib/skia/out/Release
          echo "Build complete!"
